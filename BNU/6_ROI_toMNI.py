#!/usr/bin/env python3
import os
import subprocess
import argparse
from concurrent.futures import ProcessPoolExecutor

N_JOBS = 30

def warp_roi(input_roi, output_roi, warp_file, ref_image):
    """
    Use FSL's applywarp to transform the ROI file from individual space to MNI space.
    
    :param input_roi: Path to the input ROI file in individual space.
    :param output_roi: Path to save the warped ROI file in MNI space.
    :param warp_file: Path to the warp file (fa2standard_warp.nii.gz) generated by FNIRT.
    :param ref_image: Reference image in MNI space (e.g. fa_standard_space.nii.gz).
    """
    cmd = f"applywarp -i {input_roi} -r {ref_image} -w {warp_file} -o {output_roi} --interp=nn"
    subprocess.run(cmd, shell=True, check=True)
    print(f"[INFO] Warped {input_roi} -> {output_roi}")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--data_path", required=True,
                        help="Path to the data directory (contains the 'data' subfolder)")
    parser.add_argument("--method", default="sc", choices=["sc", "kmeans", "simlr"],
                        help="Clustering method: sc (spectral clustering), kmeans, or simlr (placeholder), default=sc")
    args = parser.parse_args()

    data_path = args.data_path
    method = args.method

    os.chdir(data_path)

    # Define paths for transformation files
    warp_file = os.path.join("data", "fa2standard_warp.nii.gz")
    ref_image = os.path.join("data", "fa_standard_space.nii.gz")

    # Input directory for ROI segmentation files in individual space
    input_dir = os.path.join("data", "probtrack_old", f"parcellation_{method}")
    # Create a new directory for the segmentation results in MNI space
    output_dir = os.path.join("data", "probtrack_old", f"parcellation_{method}_MNI")
    os.makedirs(output_dir, exist_ok=True)

    # Get all nii.gz files (expected format: seed_i_j.nii.gz)
    files = [f for f in os.listdir(input_dir) if f.endswith(".nii.gz")]

    # Process each file in parallel using ProcessPoolExecutor
    with ProcessPoolExecutor(max_workers=N_JOBS) as executor:
        futures = []
        for file_name in files:
            input_roi = os.path.join(input_dir, file_name)
            output_roi = os.path.join(output_dir, file_name)
            futures.append(executor.submit(warp_roi, input_roi, output_roi, warp_file, ref_image))
        for future in futures:
            try:
                future.result()
            except Exception as e:
                print(f"[ERROR] An error occurred: {e}")

    print("[INFO] All ROI files have been warped to MNI space.")

if __name__ == "__main__":
    main()
